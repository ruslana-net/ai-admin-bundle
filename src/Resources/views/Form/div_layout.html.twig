{% block ai_admin_jqueryslider_widget %}
    {% spaceless %}
        {{ block("hidden_widget") }}
        <div id="{{ id }}_slider_num" class="jqueryslider_number">{{ value ? value : 0 }}</div>
        <div id="{{ id }}_slider"></div>
        <script type="text/javascript">
            jQuery(document).ready(function($) {
                var $field = $('#{{ id }}');
                var $configs = $.extend({{ formOptions|json_encode|raw }}, {
                    value: {{ value ? value : 0 }},
                    slide: function(event, ui) {
                        $field.val(ui.value);
                        $('#{{ id }}_slider_num').html(ui.value);
                    }
                });
                $('#{{ id }}_slider').slider($configs);
            });
        </script>
    {% endspaceless %}
{% endblock ai_admin_jqueryslider_widget %}


{% block ai_admin_model_autocomplete_widget %}
    {% spaceless %}

        {{ form_widget(form.title) }}

        {% for child in form %}
            {% if not child.rendered %}
                {{ form_widget(child) }}
            {% endif %}
        {% endfor %}

        <script>
        (function ($) {
            var autocompleteInput = $("#{{ form.title.vars.id }}");
            autocompleteInput.width('74%');
            autocompleteInput.select2({
                placeholder: "{{ placeholder }}",
                allowClear: {{ required ? 'false' : 'true' }},
                enable: {{ disabled ? 'false' : 'true' }},
                readonly: {{ read_only ? 'true' : 'false' }},
                minimumInputLength: {{ minimum_input_length }},
                multiple: true,
                maximumSelectionSize: {{ multiple ? maximumSelectionSize : 1 }},
                ajax: {
                    url:  "{{ url ?: url(route.name, route.parameters|default([])) }}",
                    dataType: 'json',
                    quietMillis: 100,
                    data: function (term, page) { // page is the one-based page number tracked by Select2
                        return {
                            //search term
                            "{{ req_param_name_search }}": term,

                            // page size
                            "{{ req_param_name_items_per_page }}": {{ items_per_page }},

                            // page number
                            "{{ req_param_name_page_number }}": page,

                            // admin
                            'uniqid': "{{ sonata_admin.admin.uniqid }}",
                            'code':   "{{ sonata_admin.admin.code }}",
                            'field':  "{{ name }}",
                            'create': {{ create }}

                            // other parameters
                            {% if req_params is not empty %},
                            {%- for key, value in req_params -%}
                            "{{- key|e('js') -}}": "{{- value|e('js') -}}"
                            {%- if not loop.last -%}, {% endif -%}
                            {%- endfor -%}
                            {% endif %}
                        };
                    },
                    results: function (data, page) {
                        // notice we return the value of more so Select2 knows if more results can be loaded
                        return {results: data.items, more: data.more};
                    }
                },
                formatResult: function (item) {
                    return {% block sonata_type_model_autocomplete_dropdown_item_format %}'<div class="sonata-autocomplete-dropdown-item">'+item.label+'</div>'{% endblock %};// format of one dropdown item
                },
                formatSelection: function (item) {
                    return {% block sonata_type_model_autocomplete_selection_format %}item.label{% endblock %};// format selected item '<b>'+item.label+'</b>';
                },
                dropdownCssClass: "{{ dropdown_css_class }}",
                escapeMarkup: function (m) { return m; } // we do not want to escape markup since we are displaying html in results
            });

            autocompleteInput.on("change", function(e) {

                // console.log("change "+JSON.stringify({val:e.val, added:e.added, removed:e.removed}));

                // add new input
                var el = null;
                if (undefined !== e.added) {

                    var addedItems = e.added;

                    if(!$.isArray(addedItems)) {
                        addedItems = [addedItems];
                    }

                    var length = addedItems.length;
                    for (var i = 0; i < length; i++) {
                        el = addedItems[i];
                        $("#{{ form.identifiers.vars.id }}").append('<input type="hidden" name="{{ form.identifiers.vars.full_name }}[]" value="'+el.id+'" />');
                    }
                }

                // remove input
                if (undefined !== e.removed && null !== e.removed) {
                    var removedItems = e.removed;

                    if(!$.isArray(removedItems)) {
                        removedItems = [removedItems];
                    }

                    var length = removedItems.length;
                    for (var i = 0; i < length; i++) {
                        el = removedItems[i];
                        $('#{{ form.identifiers.vars.id }} input:hidden[value="'+el.id+'"]').remove();
                    }
                }
            });

            // Initialise the autocomplete
            var data = [];
            {% if multiple -%}
            data = [
                {%- for key, label_text in value.labels -%}
                {id: '{{ value.identifiers[key]|e('js') }}', label:'{{ label_text|e('js') }}'}
                {%- if not loop.last -%}, {% endif -%}
                {%- endfor -%}
            ];
            {%- elseif value.labels[0] is defined -%}
            data = {id: '{{ value.identifiers[0]|e('js') }}', label:'{{ value.labels[0]|e('js') }}'};
            {%- endif  %}
            if (undefined==data.length || 0<data.length) { // Leave placeholder if no data set
                autocompleteInput.select2('data', data);
            }
        })(jQuery);
    </script>
    {% endspaceless %}
{% endblock ai_admin_model_autocomplete_widget %}


{% block ai_admin_image_uploader_widget %}
    {% spaceless %}
        {{ form_widget(form, {'attr': {'class': 'hidden'}}) }}

        <script type="text/javascript">
            $( document ).ready(function() {
                $("#uploader-{{ form.vars.id }}").fineUploader({
                    debug: {% if app.debug %}1{% else %}0{% endif %},
                    template: 'qq-template-{{ form.vars.id }}',
                    multiple: false,
                    thumbnails: {
                        placeholders:{
                            waitingPath: '/bundles/aiadmin/jquery.fine-uploader/placeholders/waiting-generic.png',
                            notAvailablePath: '/bundles/aiadmin/jquery.fine-uploader/placeholders/not_available-generic.png',
                        }
                    },
                    autoUpload: true,
                    validation: {
                        acceptFiles: 'image/*'
                    },
                    request: {
                        endpoint: "{{ oneup_uploader_endpoint(options.oneup_uploader_id) }}"
                    },
                    session: {
                        endpoint: $('#album-icon').data('endpoint')
                    },
                    callbacks: {
                        onCancel: function(id, name){
                            $.post("{{ oneup_uploader_cancel(options.oneup_uploader_id) }}");
                        }
                    }
                }).on('error', function (event, id, name, reason) {
                    // do something
                }).on('complete', function (event, id, name, responseJSON) {
                    $('#{{ form.vars.id }}').val(responseJSON.qqfile);
                });
            });
        </script>

        <div id="uploader-{{ form.vars.id }}"></div>

        <script type="text/template" id="qq-template-{{ form.vars.id }}">
            <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="{{ 'form.label_drop_image' |trans }}">
                <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                    <span class="qq-upload-drop-area-text-selector"></span>
                </div>
                <div class="buttons">
                    <div class="qq-upload-button-selector btn btn-info" accept="image/*">
                        <i class="fa fa-upload"></i>
                        <span>{{ 'form.label_select_image' |trans }}</span>
                    </div>
                </div>
                <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
                    <li>
                        <div class="qq-progress-bar-container-selector">
                            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                        </div>

                        <span class="qq-upload-spinner-selector qq-upload-spinner"></span>

                        <img class="qq-thumbnail-selector" qq-max-size="250"  qq-server-scale >

                        <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>

                        <button class="btn btn-danger qq-upload-cancel-selector qq-upload-cancel">
                            <i class="fa fa-times"></i>
                            <span>{{ 'form.label_cancel_image' |trans }}</span>
                        </button>
                    </li>
                </ul>
            </div>
        </script>
    {% endspaceless %}
{% endblock ai_admin_image_uploader_widget %}